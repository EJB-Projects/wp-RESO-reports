01) И так, первая жирная проблема была в том, как реагировать на события у дерева праймфейсовского. Там суть в чем была? У дерева самого есть только свойство selectednode. Чтобы именно запустить какое-то событие по клику надо было использовать <p:ajax и ставить там "на селект". А у аякса есть только листенер, который, сцуко, ничего не выплевывает. То есть там событие-метод void. 

Возникает проблема - нам-то надо выплюнуть String, который является именем страницы, на которую после клика на отчет мы проваливаемся. А как это сделать, если метод с void'ом ничего не выплевывает? Есть вариант провалится через прямой редирект из Джавы. Но как-то мне чисто субъективно не нравится. В общем стали мудрить. 

Оказалось, что если на этапе формирования дерева пихнуть туда не стринг, а объект с определенными свойствами, то этот объект потом можно достать даже после того как он прошел через jsf. То есть на страничке пишем такую конструкцию:

<p:treeNode type="child">
                <p:commandLink update=":form:messages"  actionListener="#{mainBean.SomeAction}" value="#{node.name}" style="background-color: gold">
                    <f:param name="action" value="#{node.name}" />
                    <f:param name="motor" value="#{node.id}" />
                </p:commandLink>
            </p:treeNode>

И потом эти свойства спокойно читаем на стороне типа сервера.

02) Вторая проблема - как определить выбранную ноду. В итоге вот такая мулька сработала:

Я в объекте, который пихается в ноду (он пока у меня называется по-дураци Document), я сделал метод:

public void nodeClicked(ActionEvent event) {
        reportController.setSelectedNodeObject(this);
    }

    ... из кода видно, что в объект я еще и пихаю reportController. Вообще такой дизайн классов - это полный пиздец. Это нарушение всего и вся в джаве и Single Responsobility и вообще всего. Тут по хорошему надо UML рисовать и использовать в самом простом случае DI, а лучше юзать спринг и паттерны для такой хери. Ну это потом. Пока так попробуем.

    Короче по коду я устанавливаю в свойство selectedNodeObject текущий выбранный объект Document. Так я могу определить что выбрано, определить его тип и id.

 03) И тут возникла следующая проблема: selectedNode то у нас типа TreeNode. А selectedNodeObject типа Document. Что делать? Как по документу определить к какой он относится ноде? Долго думал, были мысли какие-то Unique ID добавлять и прочее. В итоге пошел таким путем и он вроде бы работает:

 		Document document = new Document(reportController, convertedNodeName, nodeId, nodeType);        
        TreeNode newNode = new DefaultTreeNode(nodeType, document, selectedNode);
        document.setCurrentNode(newNode);

        А у документа соответственно есть:

        private TreeNode currentNode;

        Получается что в свойство ноды Документ запиханы имя и id, а потом в свойство Документа Нода пихаем эту ноду. Масло масленное рекурсивное. Но вроде работает.